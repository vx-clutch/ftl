(* Program Structure *)
<program> ::= <import_list> <function_list>
<import_list> ::= <import> <import_list> | ε
<function_list> ::= <function> <function_list> | ε

(* Imports *)
<import> ::= "#import" <string_literal>
<string_literal> ::= "\"" <character_sequence> "\""
<character_sequence> ::= <character> <character_sequence> | ε
<character> ::= <letter> | <digit> | "/" | "." | "_" | "-"

(* Functions *)
<function> ::= "proc" <identifier> "(" <parameter_list> ")" <return_type> "::" <block>
<parameter_list> ::= "void" | <parameters>
<parameters> ::= <parameter> | <parameter> "," <parameters>
<parameter> ::= <type> <identifier>
<return_type> ::= <type> | "void"

(* Types *)
<type> ::= <primitive_type>
<primitive_type> ::= "int" | "char" | "ptr"

(* Blocks and Statements *)
<block> ::= "{" "\t" <statement_list> "}"
<statement_list> ::= <statement> <statement_list> | ε

<statement> ::= <simple_statement> ";" | <compound_statement>
<simple_statement> ::= <declaration>
                    | <assignment>
                    | <function_call>
                    | <return_statement>
<compound_statement> ::= <if_statement>
                      | <while_loop>
                      | <for_loop>

(* Simple Statements *)
<declaration> ::= <type> <identifier> ["=" <expression>]
<assignment> ::= <lvalue> "=" <expression>
<lvalue> ::= <identifier> | <array_access>
<array_access> ::= <identifier> "[" <expression> "]"

(* Function Calls *)
<function_call> ::= <identifier> "(" <argument_list> ")"
<argument_list> ::= ε | <arguments>
<arguments> ::= <expression> | <expression> "," <arguments>

(* Control Structures *)
<if_statement> ::= "if" "(" <expression> ")" <block> <else_if_list> <else_clause>
<else_if_list> ::= <else_if_clause> <else_if_list> | ε
<else_if_clause> ::= "else" "if" "(" <expression> ")" <block>
<else_clause> ::= "else" <block> | ε
<while_loop> ::= "while" "(" <expression> ")" <block>
<for_loop> ::= "for" "(" <for_init> ";" <expression> ";" <for_update> ")" <block>

<while_loop> ::= "while" "(" <expression> ")" <block>
<for_loop> ::= "for" "(" <for_init> ";" <expression> ";" <for_update> ")" <block>
<for_init> ::= <declaration> | <assignment> | ε
<for_update> ::= <assignment> | <function_call> | ε

<return_statement> ::= "return" [<expression>]

(* Expressions *)
<expression> ::= <logical_expr>
<logical_expr> ::= <comparison_expr> {("&&" | "||") <comparison_expr>}
<comparison_expr> ::= <additive_expr> {("==" | "!=" | "<" | ">" | "<=" | ">=") <additive_expr>}
<additive_expr> ::= <multiplicative_expr> {("+" | "-") <multiplicative_expr>}
<multiplicative_expr> ::= <unary_expr> {("*" | "/" | "%") <unary_expr>}
<unary_expr> ::= [("+" | "-" | "!")] <primary_expr>
<primary_expr> ::= <identifier>
                | <literal>
                | <array_access>
                | <function_call>
                | "(" <expression> ")"

(* Literals *)
<literal> ::= <integer_literal>
            | <float_literal>
            | <char_literal>
            | <string_literal>
            | <bool_literal>
<integer_literal> ::= <digit_sequence>
<float_literal> ::= <digit_sequence> "." <digit_sequence> ["e" ["+" | "-"] <digit_sequence>]
<char_literal> ::= "'" <character> "'"
<bool_literal> ::= "true" | "false"

(* Basic Elements *)
<identifier> ::= <letter> {<letter> | <digit> | "_"}
<digit_sequence> ::= <digit> {<digit>}
<letter> ::= "a".."z" | "A".."Z"
<digit> ::= "0".."9"
